<!DOCTYPE html>
<meta charset="utf-8">
<style>

body {
  font-family: sans-serif;
  font-size: 12px;
 } 

.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

.nodes label {
  font: 10px sans-serif;
}

.tooltip {
  position: absolute;
  padding: 5px;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 2px;
  pointer-events: none; 
  opacity: 0;    
}

.badge {
  border-radius: 5px;
  padding: 8px;
  text-align: center;
  display: inline-block;
  color: #eee;
}

.color1 {
  background-color: #1f77b4;
}
.color2 {
  background-color: #ff7f0e;
}

.center {
  text-align: center;
}

</style>
<body>
<h2 class="center">Adjacency network of common adjectives and nouns in the novel <br/>David Copperfield by Charles Dickens</h2>
<h5 class="center">Click each word(node) to see corresponding word's appearance as a novel snippet. Powered by Google Books.</h5>
<svg width="1200" height="450"></svg>
<script src="https://d3js.org/d3.v4.min.js"></script>

<div class="center">
  <input type="button" id="btnreset" value="Reset Graph" onclick="reset()"/>
</div>
<div style="text-align: right">
  <h4>Legend:</h4>
  <div class="badge color1">Adjective</div>
  <div class="badge color2">Noun</div>

  <p>
  <h4>Source data: <a href="https://networkdata.ics.uci.edu/data.php?id=4">Copperfield Word Adjacencies</a></h4>
  <h4>Credits: <a href="https://bl.ocks.org/mbostock/4062045">Force-directed graph</a></h4>
  </p>
</div>

<script>

function reset(){
  d3.select("svg").selectAll("*").remove();
  graph();
}

graph();

function graph() {

var googlebooksearch = "https://books.google.com/books/about/David_Copperfield.html?id=N_0KAAAAYAAJ&printsec=frontcover&source=kp_read_button&hl=en#v=snippet&f=false&q=";

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var color = d3.scaleOrdinal(d3.schemeCategory10);

var simulation = d3.forceSimulation()
    .force("link", d3.forceLink().id(function(d) { return d.id; }))
    .force("charge", d3.forceManyBody())
    .force("center", d3.forceCenter(width / 2, height / 2))
    .force("collide", d3.forceCollide().radius(15));

var tooltip = d3.select("body")
    .append("div")
    .attr("class", "tooltip");  

d3.json("graph.json", function(error, graph) {
  if (error) throw error;

  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("circle")
    .data(graph.nodes)
    .enter()
      .append("a")
      .attr("href", function(d) { return googlebooksearch + d.label; }) 
      .attr("target", "_blank")
        .append("circle")
        .attr("r", 6)
        .attr("fill", function(d) { return color(d.group); })
        .attr("href", "www.google.com")
        .on("mouseover", mouseover)
        .on("mouseout", mouseout)
        .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);


  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });

    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }
});

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function mouseover(d) {
  if(d.value == 0) {type = 'adjective'} else {type='noun'}

  tooltip.transition()    
         .duration(100)    
         .style("opacity", .9);
       
  tooltip.html( d.label )
       .style("left", (d3.event.pageX + 5) + "px")   
       .style("top", (d3.event.pageY - 35) + "px");
}

function mouseout() {
  tooltip.transition()    
        .duration(200)    
        .style("opacity", 0); 
}
}
</script>
</body>
